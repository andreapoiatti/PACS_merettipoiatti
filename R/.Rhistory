library(fdaPDE)
#### Test 1: square domain ####
#            locations = nodes
#            laplacian
#            no covariates
#            no BC
#            order FE = 1
rm(list=ls())
graphics.off()
x = seq(0,1, length.out = 41)
y = x
locations = expand.grid(x,y)
mesh = create.mesh.2D(locations)
plot(mesh)
nnodes=dim(mesh$nodes)[1]
FEMbasis=create.FEM.basis(mesh)
# Test function
f = function(x, y, z = 1){
coe = function(x,y) 1/2*sin(5*pi*x)*exp(-x^2)+1
sin(2*pi*(coe(y,1)*x*cos(z-2)-y*sin(z-2)))*cos(2*pi*(coe(y,1)*x*cos(z-2+pi/2)+coe(x,1)*y*sin((z-2)*pi/2)))
}
# Exact solution (pointwise at nodes)
sol_exact=f(mesh$nodes[,1], mesh$nodes[,2])
image(FEM(sol_exact, FEMbasis))
# Add error to simulate data
set.seed(7893475)
ran=range(sol_exact)
data = sol_exact + rnorm(nnodes, mean=0, sd=0.05*abs(ran[2]-ran[1]))
# Set smoothing parameter
lambda= 10^seq(-6,-3,by=0.25)
#### Test 1.1: Without GCV
output_CPP<-smooth.FEM(observations=data, FEMbasis=FEMbasis, lambda=lambda)
image(output_CPP$fit.FEM)
library(fdaPDE)
data(horseshoe2D)
boundary_nodes = horseshoe2D$boundary_nodes
boundary_segments = horseshoe2D$boundary_segments
locations = horseshoe2D$locations
time_locations = seq(0,1,length.out = 5)
mesh = create.mesh.2D(nodes = rbind(boundary_nodes, locations), segments = boundary_segments)
space_time_locations = cbind(rep(time_locations,each=nrow(mesh$nodes)),
rep(mesh$nodes[,1],5),rep(mesh$nodes[,2],5))
FEMbasis = create.FEM.basis(mesh)
lambdaS = 10^-1
lambdaT = 10^-1
set.seed(1234)
data = fs.test(space_time_locations[,2],
space_time_locations[,3])*cos(pi*space_time_locations[,1]) +
rnorm(nrow(space_time_locations), sd = 0.5)
data = matrix(data, nrow = nrow(mesh$nodes), ncol = length(time_locations), byrow = TRUE)
solution = smooth.FEM.time(observations = data, time_locations = time_locations,
FEMbasis = FEMbasis, FLAG_PARABOLIC = TRUE, optimization = 'batch', DOF_evaluation = "exact", loss_function = 'GCV', lambdaS = lambdaS)
solution = smooth.FEM.time(observations = data, time_locations = time_locations,
FEMbasis = FEMbasis, FLAG_PARABOLIC = TRUE, optimization = 'batch', DOF_evaluation = "exact", loss_function = 'GCV', lambdaS = lambdaS, lambdaT = lambdaT)
solution = smooth.FEM.time(observations = data, time_locations = time_locations,
FEMbasis = FEMbasis, optimization = 'batch', DOF_evaluation = "exact", loss_function = 'GCV', lambdaS = lambdaS)
solution = smooth.FEM.time(observations = data, time_locations = time_locations,
FEMbasis = FEMbasis, optimization = 'batch', DOF_evaluation = "exact", loss_function = 'GCV', lambdaS = lambdaS, lambdaT = lambdaT)
library(fdaPDE)
####### 2D ########
#### Test 1: square domain ####
#            locations = nodes
#            laplacian
#            no covariates
#            no BC
#            order FE = 1
rm(list=ls())
graphics.off()
x = seq(0,1, length.out = 41)
y = x
locations = expand.grid(x,y)
mesh = create.mesh.2D(locations)
plot(mesh)
nnodes=dim(mesh$nodes)[1]
FEMbasis=create.FEM.basis(mesh)
# Test function
f = function(x, y, z = 1){
coe = function(x,y) 1/2*sin(5*pi*x)*exp(-x^2)+1
sin(2*pi*(coe(y,1)*x*cos(z-2)-y*sin(z-2)))*cos(2*pi*(coe(y,1)*x*cos(z-2+pi/2)+coe(x,1)*y*sin((z-2)*pi/2)))
}
# Exact solution (pointwise at nodes)
sol_exact=f(mesh$nodes[,1], mesh$nodes[,2])
image(FEM(sol_exact, FEMbasis))
# Add error to simulate data
set.seed(7893475)
ran=range(sol_exact)
data = sol_exact + rnorm(nnodes, mean=0, sd=0.05*abs(ran[2]-ran[1]))
# Set smoothing parameter
lambda= 10^seq(-6,-3,by=0.25)
#### Test 1.1: Without GCV
GCVFLAG=FALSE
output_CPP<-smooth.FEM(observations=data, FEMbasis=FEMbasis, lambda=lambda,optimization = 'batch', DOF_evaluation = 'exact', loss_function = 'GCV')
